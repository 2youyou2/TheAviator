{"version":3,"sources":["assets/src/primitive/box.js","assets/src/primitive/cylinder.js","assets/src/enemy-manager.js","assets/src/game.js","assets/src/player-control.js","assets/src/primitive/primitive.js","assets/src/propeller.js","assets/src/scene-ambient.js","assets/src/sea.js","assets/src/sky.js","assets/src/primitive/sphere.js"],"names":["Primitive","require","cc","Class","extends","properties","width","default","notify","this","delayInit","height","length","_createData","primitive","box","radiusTop","radiusBottom","radiusSegments","heightSegments","cylinder","radialSegments","Component","enemyCount","enemyColor","color","fromHEX","rotateSpeed","_initMesh","data","mesh","createMesh","_mesh","start","enemyInUse","enemyPool","i","node","createEnemy","push","spawnEnemy","window","game","createMeshNode","nEnemies","level","pool","enemies","enemy","pop","angle","distance","seaHeight","playerDefaultY","Math","random","playerYRange","x","cos","y","sin","parent","update","dt","_eulerAngles","eulerAngles","module","exports","playerXRange","skyHeight","skyHeightRange","world","Node","speed","ratioSpeedDistance","material","Material","distanceLabel","Label","levelLabel","onLoad","reset","angles","v3","name","shadowCast","is3DNode","renderer","addComponent","MeshRenderer","setMaterial","shadowCastingMode","ShadowCastingMode","ON","z","updateUI","string","normalize","v","vmin","vmax","tmin","tmax","nv","max","min","dv","pc","tv","moveSensivity","rotXSensivity","rotZSensivity","camera","Camera","cameraSensivity","position","touchPos","v2","canvas","find","on","EventType","TOUCH_MOVE","onTouchMove","MOUSE_MOVE","onMoseMove","event","touches","getTouches","_setTouchPos","getLocation","pos","visibleRect","targetY","targetX","fov","editor","executeInEditMode","requireComponent","Color","WHITE","init","getComponent","_delatIniting","CC_EDITOR","scheduleOnce","gfx","vfmt","VertexFormat","ATTR_POSITION","type","ATTR_TYPE_FLOAT32","num","ATTR_NORMAL","ATTR_COLOR","ATTR_TYPE_UINT8","colors","positions","Mesh","setVertices","normals","setIndices","indices","setBoundingBox","minPos","maxPos","_ambient","ambient","get","set","val","_updateSceneAmbient","_forward","sceneAmbient","calcFaceNormals","Array","l","vA","vB","vC","pA","pB","pC","cb","ab","vec3","vmath","fromArray","out","a","offset","_i","il","sub","cross","tempNormal","_i2","_l","normalizeSelf","calcVertexNormals","_i3","_i4","_l2","wavesMinAmp","wavesMaxAmp","wavesMinSpeed","wavesMaxSpeed","waves","ang","PI","amp","vprops","v3_tmp","cloudCount","cloudColor","blockPrefab","Prefab","clouds","stepAngle","cloud","createCloud","h","scale","nBlocks","floor","block","j","children","radius","segments","sphere"],"mappings":"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","sourcesContent":["const Primitive = require('./primitive');\n\ncc.Class({\n    extends: Primitive,\n\n    properties: {\n        width: {\n            default: 100,\n            notify () {\n                this.delayInit();\n            }\n        },\n        height: {\n            default: 100,\n            notify () {\n                this.delayInit();\n            }\n        },\n        length: {\n            default: 100,\n            notify () {\n                this.delayInit();\n            }\n        }\n    },\n    _createData () {\n        return cc.primitive.box(this.width, this.height, this.length);\n    }\n});\n","const Primitive = require('./primitive');\n\ncc.Class({\n    extends: Primitive,\n\n    properties: {\n        radiusTop: {\n            default: 30,\n            notify () {\n                this.delayInit();\n            }\n        },\n        radiusBottom: {\n            default: 30,\n            notify () {\n                this.delayInit();\n            }\n        },\n        height: {\n            default: 100,\n            notify () {\n                this.delayInit();\n            }\n        },\n        radiusSegments: {\n            default: 32,\n            notify () {\n                this.delayInit();\n            }\n        },\n        heightSegments: {\n            default: 1,\n            notify () {\n                this.delayInit();\n            }\n        }\n    },\n    _createData () {\n        return cc.primitive.cylinder(this.radiusTop, this.radiusBottom, this.height, {\n            radialSegments: this.radiusSegments,\n            heightSegments: this.heightSegments\n        });\n    }\n});\n","const Primitive = require('./primitive/primitive');\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        enemyCount: 10,\n        enemyColor: cc.color().fromHEX('0xf25346'),\n        rotateSpeed: 360,\n    },\n\n    _initMesh () {\n        let data = cc.primitive.box(10, 10, 10);\n        let mesh = Primitive.createMesh(data, this.enemyColor);\n        this._mesh = mesh;\n    },\n\n    start () {\n        this._initMesh();\n\n        this.enemyInUse = [];\n        let enemyPool = this.enemyPool = [];\n        for (let i = 0; i < this.enemyCount; i++) {\n            let node = this.createEnemy();\n            enemyPool.push(node);\n        }\n\n        this.spawnEnemy();\n    },\n\n    createEnemy () {\n        return window.game.createMeshNode('enemy', this._mesh, true);\n    },\n\n    spawnEnemy () {\n        let nEnemies = window.game.level;\n        let pool = this.enemyPool;\n        let enemies = this.enemyInUse;\n        for (let i = 0; i < nEnemies; i++) {\n            let enemy = pool.pop();\n            if (!enemy) {\n                enemy = this.createEnemy();\n            }\n            let angle = - (i*0.1);\n            let distance = game.seaHeight + game.playerDefaultY + (-1 + Math.random() * 2) * (game.playerYRange-20);\n            enemy.x = Math.cos(angle) * distance;\n            enemy.y = Math.sin(angle) * distance;\n\n            enemy.parent = this.node;\n            enemies.push(enemy);\n        }\n    },\n\n    update (dt) {\n        let enemies = this.enemyInUse;\n        for (let i = 0; i < enemies.length; i++) {\n            let enemy = enemies[i];\n            enemy._eulerAngles.x += Math.random() ;\n            enemy._eulerAngles.y += Math.random() ;\n            enemy.eulerAngles = enemy._eulerAngles;\n        }\n    }\n});\n","\nmodule.exports = cc.Class({\n    extends: cc.Component,\n\n    properties: {\n        playerXRange: 100,\n        playerYRange: 80,\n        playerDefaultY: 100,\n\n        seaHeight: 600, \n\n        skyHeight: 150,\n        skyHeightRange: 200,\n\n        world: cc.Node,\n        speed: 30,\n        ratioSpeedDistance: 0.05,\n\n        material: cc.Material,\n        level: 1,\n\n        distanceLabel: cc.Label,\n        levelLabel: cc.Label\n    },\n    onLoad () {\n        window.game = this;\n        this.reset();\n    },\n    reset () {\n        this.angles = cc.v3();\n        this.distance = 0;\n    },\n\n    createMeshNode (name, mesh, shadowCast) {\n        let node = new cc.Node(name);\n        node.is3DNode = true;\n        let renderer = node.addComponent(cc.MeshRenderer);\n        renderer.setMaterial(0, this.material);\n        renderer.mesh = mesh;\n        renderer.shadowCastingMode = shadowCast ? cc.MeshRenderer.ShadowCastingMode.ON : false;\n        return node;\n    },\n\n    update (dt) {\n        this.angles.z += this.speed * dt;\n        this.world.eulerAngles = this.angles;\n        this.distance += this.speed * dt * this.ratioSpeedDistance;\n    \n        this.updateUI();\n    },\n    updateUI () {\n        this.distanceLabel.string = this.distance | 0;\n        this.levelLabel.string = this.level;\n    }\n});\n","\nfunction normalize(v,vmin,vmax,tmin, tmax){\n    let nv = Math.max(Math.min(v,vmax), vmin);\n    let dv = vmax-vmin;\n    let pc = (nv-vmin)/dv;\n    let dt = tmax-tmin;\n    let tv = tmin + (pc*dt);\n    return tv;\n}\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        moveSensivity: 5,\n        rotXSensivity: 0.8,\n        rotZSensivity: 0.4,\n\n        camera: cc.Camera,\n        cameraSensivity: 2\n    },\n    \n    onLoad () {\n        this.reset();\n    },\n    reset () {\n        this.angles = cc.v3();\n        this.node.position = cc.v3(0, game.playerDefaultY, 0);\n        this.touchPos = cc.v2();\n    },\n\n    start () {\n        let canvas = cc.find('Canvas');\n        canvas.on(cc.Node.EventType.TOUCH_MOVE, this.onTouchMove, this);\n        canvas.on(cc.Node.EventType.MOUSE_MOVE, this.onMoseMove, this);\n    },\n\n    onTouchMove (event) {\n        let touches = event.getTouches();\n        this._setTouchPos( touches[0].getLocation() );\n    },\n\n    onMoseMove (event) {\n        this._setTouchPos (event.getLocation() );\n    },\n\n    _setTouchPos (pos) {\n        // the value range is -1 - 1\n        this.touchPos.x = -1 + pos.x / cc.visibleRect.width * 2;\n        this.touchPos.y = -1 + pos.y / cc.visibleRect.height * 2;\n    },\n\n    update (dt) {\n        let touchPos = this.touchPos;\n\n        let targetY = normalize(touchPos.y, -.75,.75, game.playerDefaultY-game.playerYRange, game.playerDefaultY+game.playerYRange);\n        let targetX = normalize(touchPos.x, -1,1, -game.playerXRange*0.7, -game.playerXRange);\n\n        this.node.y += (targetY - this.node.y) * dt * this.moveSensivity;\n        this.node.x += (targetX - this.node.x) * dt * this.moveSensivity;\n\n        this.angles.z = (targetY - this.node.y) * dt * this.rotZSensivity;\n        this.angles.x = (this.node.y - targetY) * dt * this.rotXSensivity;\n        this.node.eulerAngles = this.angles;\n\n        let camera = this.camera;\n        camera.fov = normalize(touchPos.x, -1,1, 40,80);\n        camera.node.y += (this.node.y - camera.node.y) * dt * this.cameraSensivity;\n    },\n});\n","\nconst Primitive = cc.Class({\n    extends: cc.Component,\n\n    editor: {\n        executeInEditMode: true,\n        requireComponent: cc.MeshRenderer\n    },\n\n    properties: {\n        color: {\n            default: cc.Color.WHITE,\n            notify () {\n                this.delayInit();\n            }\n        }\n    },\n\n    // LIFE-CYCLE CALLBACKS:\n\n    onLoad () {\n        this.init();\n    },\n\n    init () {\n        let data = this._createData();\n        let mesh = Primitive.createMesh(data, this.color);\n\n        let renderer = this.getComponent(cc.MeshRenderer);\n        renderer.mesh = mesh;\n\n        this.data = data;\n        this._delatIniting = false;\n    },\n\n    delayInit () {\n        if (CC_EDITOR) {\n            this.init();\n            return;\n        }\n\n        if (this._delatIniting) return;\n        this._delatIniting = true;\n        this.scheduleOnce(this.init);\n    },\n\n    _createData () {\n        return {};\n    }\n});\n\nPrimitive.createMesh = function (data, color) {\n    let gfx = cc.gfx;\n    let vfmt = new gfx.VertexFormat([\n        { name: gfx.ATTR_POSITION, type: gfx.ATTR_TYPE_FLOAT32, num: 3 },\n        { name: gfx.ATTR_NORMAL, type: gfx.ATTR_TYPE_FLOAT32, num: 3 },\n        { name: gfx.ATTR_COLOR, type: gfx.ATTR_TYPE_UINT8, num: 4, normalize: true },\n    ]);\n\n    let colors = [];\n    for (let i = 0; i < data.positions.length; i++) {\n        colors.push(color);\n    }\n\n    let mesh = new cc.Mesh();\n    mesh.init(vfmt, data.positions.length);\n    mesh.setVertices(gfx.ATTR_POSITION, data.positions);\n    mesh.setVertices(gfx.ATTR_NORMAL, data.normals);\n    mesh.setVertices(gfx.ATTR_COLOR, colors);\n    mesh.setIndices(data.indices);\n    mesh.setBoundingBox(data.minPos, data.maxPos);\n\n    return mesh;\n};\n\nmodule.exports = Primitive;\n","\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        rotateSpeed: 360\n    },\n\n    // LIFE-CYCLE CALLBACKS:\n\n    // onLoad () {},\n\n    start () {\n        this.angles = cc.v3();\n    },\n\n    update (dt) {\n        this.angles.x += this.rotateSpeed * dt;\n        this.node.eulerAngles = this.angles;\n    },\n});\n","// Learn cc.Class:\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/class.html\n//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/class.html\n// Learn Attribute:\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\n//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\n//  - [English] https://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html\n\ncc.Class({\n    extends: cc.Component,\n\n    editor: {\n        executeInEditMode: true,\n    },\n\n    properties: {\n        _ambient: cc.Color,\n        ambient: {\n            get () {\n                return this._ambient;\n            },\n            set (val) {\n                this._ambient = val;\n                this._updateSceneAmbient();\n            }\n        }\n    },\n\n    start () {\n        this._updateSceneAmbient();\n    },\n    \n    _updateSceneAmbient () {\n        cc.renderer._forward.sceneAmbient = this.ambient;\n    }\n});\n","\nfunction calcFaceNormals (positions, indices, normals) {\n    normals = normals || new Array(positions.length);\n    for (let i = 0, l = normals.length; i < l; i++) {\n        normals[i] = 0;\n    }\n\n    let vA, vB, vC;\n    let pA = cc.v3(), pB = cc.v3(), pC = cc.v3();\n    let cb = cc.v3(), ab = cc.v3();\n    let vec3 = cc.vmath.vec3;\n\n    function fromArray (out, a, offset) {\n        out.x = a[offset];\n        out.y = a[offset+1];\n        out.z = a[offset+2];\n    }\n\n    for (let i = 0, il = indices.length; i < il; i += 3) {\n\n        vA = indices[i + 0] * 3;\n        vB = indices[i + 1] * 3;\n        vC = indices[i + 2] * 3;\n\n        fromArray(pA, positions, vA);\n        fromArray(pB, positions, vB);\n        fromArray(pC, positions, vC);\n\n        vec3.sub(cb, pC, pB);\n        vec3.sub(ab, pA, pB);\n        vec3.cross(cb, cb, ab);\n\n        normals[vA] += cb.x;\n        normals[vA + 1] += cb.y;\n        normals[vA + 2] += cb.z;\n\n        normals[vB] += cb.x;\n        normals[vB + 1] += cb.y;\n        normals[vB + 2] += cb.z;\n\n        normals[vC] += cb.x;\n        normals[vC + 1] += cb.y;\n        normals[vC + 2] += cb.z;\n    }\n\n    let tempNormal = cc.v3();\n    for (let i = 0, l = normals.length; i < l; i+=3) {\n        tempNormal.x = normals[i];\n        tempNormal.y = normals[i+1];\n        tempNormal.z = normals[i+2];\n\n        tempNormal.normalizeSelf();\n\n        normals[i] = tempNormal.x;\n        normals[i+1] = tempNormal.y;\n        normals[i+2] = tempNormal.z;\n    }\n\n    return normals;\n}\n\nfunction calcVertexNormals (positions, indices, normals) {\n    normals = normals || new Array(positions.length);\n    for (let i = 0, l = normals.length; i < l; i++) {\n        normals[i] = 0;\n    }\n\n    let vA, vB, vC;\n    let pA = cc.v3(), pB = cc.v3(), pC = cc.v3();\n    let cb = cc.v3(), ab = cc.v3();\n    let vec3 = cc.vmath.vec3;\n\n    function fromArray (out, a, offset) {\n        out.x = a[offset];\n        out.y = a[offset+1];\n        out.z = a[offset+2];\n    }\n\n    for (let i = 0, il = indices.length; i < il; i += 3) {\n\n        vA = indices[i + 0] * 3;\n        vB = indices[i + 1] * 3;\n        vC = indices[i + 2] * 3;\n\n        fromArray(pA, positions, vA);\n        fromArray(pB, positions, vB);\n        fromArray(pC, positions, vC);\n\n        vec3.sub(cb, pC, pB);\n        vec3.sub(ab, pA, pB);\n        vec3.cross(cb, cb, ab);\n\n        normals[vA] += cb.x;\n        normals[vA + 1] += cb.y;\n        normals[vA + 2] += cb.z;\n\n        normals[vB] += cb.x;\n        normals[vB + 1] += cb.y;\n        normals[vB + 2] += cb.z;\n\n        normals[vC] += cb.x;\n        normals[vC + 1] += cb.y;\n        normals[vC + 2] += cb.z;\n    }\n\n    let tempNormal = cc.v3();\n    for (let i = 0, l = normals.length; i < l; i+=3) {\n        tempNormal.x = normals[i];\n        tempNormal.y = normals[i+1];\n        tempNormal.z = normals[i+2];\n\n        tempNormal.normalizeSelf();\n\n        normals[i] = tempNormal.x;\n        normals[i+1] = tempNormal.y;\n        normals[i+2] = tempNormal.z;\n    }\n\n    return normals;\n}\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        rotateSpeed: 360,\n        wavesMinAmp: 5,\n        wavesMaxAmp: 20,\n        wavesMinSpeed: 0.001,\n        wavesMaxSpeed: 0.003,\n    },\n\n    start () {\n        this.node._eulerAngles = cc.v3(-90, 0, 0);\n        let data = this.data = this.getComponent('cylinder').data;\n\n        this.waves = [];\n        let positions = data.positions;\n        for (let i = 0, l = data.positions.length; i < l; i += 3) {\n            this.waves.push({\n                x: positions[i], y: positions[i + 1], z: positions[i + 2],\n                ang: Math.random() * Math.PI * 2,\n                amp: this.wavesMinAmp + Math.random() * (this.wavesMaxAmp - this.wavesMinAmp),\n                speed: this.wavesMinSpeed + Math.random() * (this.wavesMaxSpeed - this.wavesMinSpeed)\n            });\n        };\n\n        this.mesh = this.getComponent(cc.MeshRenderer).mesh;\n    },\n\n    update (dt) {\n        let positions = this.data.positions;\n        for (let i = 0, l = positions.length; i < l; i += 3) {\n            let vprops = this.waves[i / 3];\n            positions[i] = vprops.x + Math.cos(vprops.ang) * vprops.amp;\n            positions[i + 1] = vprops.y + Math.sin(vprops.ang) * vprops.amp;\n            vprops.ang += vprops.speed * dt;\n        }\n        this.mesh.setVertices(cc.gfx.ATTR_POSITION, positions);\n\n        // let normals = calcVertexNormals(positions, this.data.indices, this.data.normals);\n        // this.mesh.setVertices(cc.gfx.ATTR_NORMAL, normals);\n    },\n});\n","const Primitive = require('./primitive/primitive');\n\nlet v3_tmp = cc.v3();\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        cloudCount: 20,\n        cloudColor: cc.color().fromHEX('0xF7D9AA'),\n\n        rotateSpeed: 360,\n\n        blockPrefab: cc.Prefab\n    },\n\n    start () {\n        this._initMesh();\n\n        let clouds = new Array(this.cloudCount);\n        let stepAngle = Math.PI * 2 / this.cloudCount;\n        for (let i = 0; i < this.cloudCount; i++) {\n            let cloud = this.createCloud();\n            clouds[i] = cloud;\n\n            let a = stepAngle * i;\n            let h = game.seaHeight + game.skyHeight + Math.random() * game.skyHeightRange;\n\n            cloud.y = Math.sin(a) * h;\n            cloud.x = Math.cos(a) * h;\n            cloud.z = -300 - Math.random() * 500;\n\n            v3_tmp.x = v3_tmp.y = 0;\n            v3_tmp.z = a + Math.PI / 2;\n            cloud.eulerAngles = v3_tmp;\n\n            cloud.scale = 1 + Math.random() * 2;\n\n            cloud.parent = this.node;\n        }\n\n        this.clouds = clouds;\n    },\n\n    // for use the same mesh\n    _initMesh () {\n        let data = cc.primitive.box(1, 1, 1);\n        let mesh = Primitive.createMesh(data, this.cloudColor);\n        this._mesh = mesh;\n    },\n\n    createCloud () {\n        let cloud = new cc.Node('cloud');\n        cloud.is3DNode = true;\n\n        let nBlocks = 3 + Math.floor(Math.random() * 3);\n        for (let i = 0; i < nBlocks; i++) {\n            let block = window.game.createMeshNode('barrier', this._mesh);\n\n            block.x = i * 15;\n            block.y = Math.random() * 10;\n            block.z = Math.random() * 10;\n\n            let angle = cc.v3();\n            angle.z = Math.random() * Math.PI * 2;\n            angle.y = Math.random() * Math.PI * 2;\n            block._eulerAngles = angle;\n\n            block.scale = 20 * (0.3 + Math.random() * 0.7);\n\n            block.parent = cloud;\n        }\n\n        return cloud;\n    },\n\n    update (dt) {\n        for (let i = 0; i < this.clouds.length; i++) {\n            let cloud = this.clouds[i];\n\n            for (let j = 0; j < cloud.children.length; j++) {\n                let block = cloud.children[j];\n                block._eulerAngles.z += Math.random() * 0.5 * (j + 1);\n                block._eulerAngles.y += Math.random() * 0.2 * (j + 1);\n                block.eulerAngles = block._eulerAngles;\n            }\n        }\n    },\n});\n","\nconst Primitive = require('./primitive');\n\ncc.Class({\n    extends: Primitive,\n\n    properties: {\n        radius: {\n            default: 25,\n            notify () {\n                this.delayInit();\n            }\n        },\n\n        segments: {\n            default: 32,\n            notify () {\n                this.delayInit();\n            }\n        }\n    },\n\n    _createData () {\n        return cc.primitive.sphere(this.radius, { segments: this.segments });\n    }\n});\n"],"sourceRoot":"/source/","file":"project.dev.js"}
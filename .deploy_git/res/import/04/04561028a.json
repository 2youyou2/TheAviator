[
  {
    "__type__": "cc.Material",
    "_name": "flat",
    "_effectAsset": {
      "__uuid__": "c2MjQxwmZMQo7Nvm6lQvYg"
    },
    "_defines": {
      "USE_SPECULAR_TEXTURE": false,
      "USE_SPECULAR": false
    },
    "_props": {}
  },
  [
    {
      "__type__": "cc.SceneAsset",
      "_name": "main",
      "scene": {
        "__id__": 1
      },
      "asyncLoadAssets": null
    },
    {
      "__type__": "cc.Scene",
      "_name": "New Node",
      "_children": [
        {
          "__id__": 2
        },
        {
          "__id__": 15
        }
      ],
      "_active": false,
      "_anchorPoint": {
        "__type__": "cc.Vec2"
      },
      "_scale": {
        "__type__": "cc.Vec3",
        "x": 1,
        "y": 1,
        "z": 1
      },
      "autoReleaseAssets": false
    },
    {
      "__type__": "cc.Node",
      "_name": "Canvas",
      "_parent": {
        "__id__": 1
      },
      "_children": [
        {
          "__id__": 3
        },
        {
          "__id__": 4
        }
      ],
      "_level": 1,
      "_components": [
        {
          "__type__": "cc.Canvas",
          "node": {
            "__id__": 2
          }
        }
      ],
      "_contentSize": {
        "__type__": "cc.Size",
        "width": 960,
        "height": 640
      },
      "_position": {
        "__type__": "cc.Vec3",
        "x": 480,
        "y": 320
      },
      "_scale": {
        "__type__": "cc.Vec3",
        "x": 1,
        "y": 1,
        "z": 1
      },
      "groupIndex": 1,
      "_id": "eedlG2RX1JjJSrxhnITlGv"
    },
    {
      "__type__": "cc.Node",
      "_name": "Main Camera",
      "_parent": {
        "__id__": 2
      },
      "_level": 2,
      "_components": [
        {
          "__type__": "cc.Camera",
          "node": {
            "__id__": 3
          },
          "_cullingMask": 2,
          "_depth": 1000
        }
      ],
      "_position": {
        "__type__": "cc.Vec3",
        "z": 554.2562584220408
      },
      "_scale": {
        "__type__": "cc.Vec3",
        "x": 1,
        "y": 1,
        "z": 1
      }
    },
    {
      "__type__": "cc.Node",
      "_name": "bg info",
      "_parent": {
        "__id__": 2
      },
      "_children": [
        {
          "__id__": 5
        },
        {
          "__id__": 6
        },
        {
          "__id__": 7
        },
        {
          "__id__": 8
        },
        {
          "__id__": 9
        },
        {
          "__id__": 10
        },
        {
          "__id__": 12
        },
        {
          "__id__": 13
        }
      ],
      "_level": 2,
      "_components": [
        {
          "__type__": "cc.Widget",
          "node": {
            "__id__": 4
          },
          "_alignFlags": 1,
          "_left": 480,
          "_right": 480,
          "_top": 20,
          "_bottom": 320
        }
      ],
      "_position": {
        "__type__": "cc.Vec3",
        "y": 300
      },
      "_scale": {
        "__type__": "cc.Vec3",
        "x": 1,
        "y": 1,
        "z": 1
      }
    },
    {
      "__type__": "cc.Node",
      "_name": "the",
      "_parent": {
        "__id__": 4
      },
      "_level": 3,
      "_components": [
        {
          "__type__": "cc.Label",
          "node": {
            "__id__": 5
          },
          "_srcBlendFactor": 1,
          "_useOriginalSize": false,
          "_string": "the",
          "_N$string": "the",
          "_fontSize": 20,
          "_lineHeight": 20,
          "_N$horizontalAlign": 1,
          "_N$verticalAlign": 1
        }
      ],
      "_opacity": 150,
      "_color": {
        "__type__": "cc.Color",
        "r": 214,
        "g": 72,
        "b": 59
      },
      "_contentSize": {
        "__type__": "cc.Size",
        "width": 27.8,
        "height": 25
      },
      "_position": {
        "__type__": "cc.Vec3",
        "x": -45.41,
        "y": -5.946
      },
      "_scale": {
        "__type__": "cc.Vec3",
        "x": 1,
        "y": 1,
        "z": 1
      }
    },
    {
      "__type__": "cc.Node",
      "_name": "aviator",
      "_parent": {
        "__id__": 4
      },
      "_level": 3,
      "_components": [
        {
          "__type__": "cc.Label",
          "node": {
            "__id__": 6
          },
          "_srcBlendFactor": 1,
          "_useOriginalSize": false,
          "_string": "Aviator",
          "_N$string": "Aviator",
          "_fontSize": 60,
          "_lineHeight": 60,
          "_N$horizontalAlign": 1,
          "_N$verticalAlign": 1
        }
      ],
      "_opacity": 120,
      "_color": {
        "__type__": "cc.Color",
        "r": 209,
        "g": 67,
        "b": 54
      },
      "_contentSize": {
        "__type__": "cc.Size",
        "width": 185.65,
        "height": 75
      },
      "_position": {
        "__type__": "cc.Vec3",
        "y": -38.485
      },
      "_scale": {
        "__type__": "cc.Vec3",
        "x": 1,
        "y": 1,
        "z": 1
      }
    },
    {
      "__type__": "cc.Node",
      "_name": "info",
      "_parent": {
        "__id__": 4
      },
      "_level": 3,
      "_components": [
        {
          "__type__": "cc.Label",
          "node": {
            "__id__": 7
          },
          "_srcBlendFactor": 1,
          "_string": "F L Y   I T   T O   T H E   E N D",
          "_N$string": "F L Y   I T   T O   T H E   E N D",
          "_fontSize": 20,
          "_lineHeight": 20
        }
      ],
      "_color": {
        "__type__": "cc.Color",
        "r": 209,
        "g": 67,
        "b": 54
      },
      "_contentSize": {
        "__type__": "cc.Size",
        "width": 275.59,
        "height": 25
      },
      "_position": {
        "__type__": "cc.Vec3",
        "y": -90.987
      },
      "_scale": {
        "__type__": "cc.Vec3",
        "x": 1,
        "y": 1,
        "z": 1
      }
    },
    {
      "__type__": "cc.Node",
      "_name": "distance",
      "_parent": {
        "__id__": 4
      },
      "_level": 3,
      "_components": [
        {
          "__type__": "cc.Label",
          "node": {
            "__id__": 8
          },
          "_srcBlendFactor": 1,
          "_useOriginalSize": false,
          "_string": "DISTANCE",
          "_N$string": "DISTANCE",
          "_fontSize": 20,
          "_lineHeight": 20,
          "_N$horizontalAlign": 1,
          "_N$verticalAlign": 1
        }
      ],
      "_opacity": 130,
      "_color": {
        "__type__": "cc.Color",
        "r": 209,
        "g": 67,
        "b": 54
      },
      "_contentSize": {
        "__type__": "cc.Size",
        "width": 99.64,
        "height": 25
      },
      "_position": {
        "__type__": "cc.Vec3",
        "x": -6.846,
        "y": -127.345
      },
      "_scale": {
        "__type__": "cc.Vec3",
        "x": 1,
        "y": 1,
        "z": 1
      }
    },
    {
      "__type__": "cc.Node",
      "_name": "energy",
      "_parent": {
        "__id__": 4
      },
      "_level": 3,
      "_components": [
        {
          "__type__": "cc.Label",
          "node": {
            "__id__": 9
          },
          "_srcBlendFactor": 1,
          "_useOriginalSize": false,
          "_string": "ENERGY",
          "_N$string": "ENERGY",
          "_fontSize": 20,
          "_lineHeight": 20,
          "_N$horizontalAlign": 1,
          "_N$verticalAlign": 1
        }
      ],
      "_opacity": 130,
      "_color": {
        "__type__": "cc.Color",
        "r": 209,
        "g": 67,
        "b": 54
      },
      "_contentSize": {
        "__type__": "cc.Size",
        "width": 84.46,
        "height": 25
      },
      "_position": {
        "__type__": "cc.Vec3",
        "x": 118.176,
        "y": -127.345
      },
      "_scale": {
        "__type__": "cc.Vec3",
        "x": 1,
        "y": 1,
        "z": 1
      }
    },
    {
      "__type__": "cc.Node",
      "_name": "distance number",
      "_parent": {
        "__id__": 4
      },
      "_level": 3,
      "_components": [
        {
          "__id__": 11
        }
      ],
      "_opacity": 130,
      "_color": {
        "__type__": "cc.Color",
        "r": 209,
        "g": 67,
        "b": 54
      },
      "_contentSize": {
        "__type__": "cc.Size",
        "width": 11.12,
        "height": 25
      },
      "_position": {
        "__type__": "cc.Vec3",
        "x": -6.846,
        "y": -158.33
      },
      "_scale": {
        "__type__": "cc.Vec3",
        "x": 1,
        "y": 1,
        "z": 1
      }
    },
    {
      "__type__": "cc.Label",
      "node": {
        "__id__": 10
      },
      "_srcBlendFactor": 1,
      "_useOriginalSize": false,
      "_string": "0",
      "_N$string": "0",
      "_fontSize": 20,
      "_lineHeight": 20,
      "_N$horizontalAlign": 1,
      "_N$verticalAlign": 1
    },
    {
      "__type__": "cc.Node",
      "_name": "level",
      "_parent": {
        "__id__": 4
      },
      "_level": 3,
      "_components": [
        {
          "__type__": "cc.Label",
          "node": {
            "__id__": 12
          },
          "_srcBlendFactor": 1,
          "_useOriginalSize": false,
          "_string": "LEVEL",
          "_N$string": "LEVEL",
          "_fontSize": 20,
          "_lineHeight": 20,
          "_N$horizontalAlign": 1,
          "_N$verticalAlign": 1
        }
      ],
      "_opacity": 130,
      "_color": {
        "__type__": "cc.Color",
        "r": 209,
        "g": 67,
        "b": 54
      },
      "_contentSize": {
        "__type__": "cc.Size",
        "width": 62.27,
        "height": 25
      },
      "_position": {
        "__type__": "cc.Vec3",
        "x": -140.363,
        "y": -127.345
      },
      "_scale": {
        "__type__": "cc.Vec3",
        "x": 1,
        "y": 1,
        "z": 1
      }
    },
    {
      "__type__": "cc.Node",
      "_name": "level number",
      "_parent": {
        "__id__": 4
      },
      "_level": 3,
      "_components": [
        {
          "__id__": 14
        }
      ],
      "_opacity": 130,
      "_color": {
        "__type__": "cc.Color",
        "r": 209,
        "g": 67,
        "b": 54
      },
      "_contentSize": {
        "__type__": "cc.Size",
        "width": 11.12,
        "height": 25
      },
      "_position": {
        "__type__": "cc.Vec3",
        "x": -140.363,
        "y": -158.33
      },
      "_scale": {
        "__type__": "cc.Vec3",
        "x": 1,
        "y": 1,
        "z": 1
      }
    },
    {
      "__type__": "cc.Label",
      "node": {
        "__id__": 13
      },
      "_srcBlendFactor": 1,
      "_useOriginalSize": false,
      "_string": "0",
      "_N$string": "0",
      "_fontSize": 20,
      "_lineHeight": 20,
      "_N$horizontalAlign": 1,
      "_N$verticalAlign": 1
    },
    {
      "__type__": "cc.Node",
      "_name": "game",
      "_parent": {
        "__id__": 1
      },
      "_children": [
        {
          "__id__": 16
        },
        {
          "__id__": 20
        },
        {
          "__id__": 22
        },
        {
          "__id__": 29
        }
      ],
      "_level": 1,
      "_components": [
        {
          "__type__": "f8bd8ThP5VFOrMtn2xMutCw",
          "node": {
            "__id__": 15
          },
          "_ambient": {
            "__type__": "cc.Color",
            "r": 220,
            "g": 136,
            "b": 116
          }
        },
        {
          "__type__": "b201btp/JxCdaQYiSCLDnTl",
          "node": {
            "__id__": 15
          },
          "world": {
            "__id__": 16
          },
          "speed": 45,
          "ratioSpeedDistance": 0.1,
          "material": {
            "__uuid__": "04dKqMWpZIOLaWSFMPOI1v"
          },
          "distanceLabel": {
            "__id__": 11
          },
          "levelLabel": {
            "__id__": 14
          }
        }
      ],
      "_scale": {
        "__type__": "cc.Vec3",
        "x": 1,
        "y": 1,
        "z": 1
      },
      "_is3DNode": true,
      "_id": "d5MaaR/udFVrq+GJuqt3Xk"
    },
    {
      "__type__": "cc.Node",
      "_name": "world",
      "_parent": {
        "__id__": 15
      },
      "_children": [
        {
          "__id__": 17
        },
        {
          "__id__": 18
        },
        {
          "__id__": 19
        }
      ],
      "_level": 2,
      "_position": {
        "__type__": "cc.Vec3",
        "y": -600
      },
      "_scale": {
        "__type__": "cc.Vec3",
        "x": 1,
        "y": 1,
        "z": 1
      },
      "_is3DNode": true
    },
    {
      "__type__": "cc.Node",
      "_name": "sea",
      "_parent": {
        "__id__": 16
      },
      "_level": 3,
      "_components": [
        {
          "__type__": "cc.MeshRenderer",
          "node": {
            "__id__": 17
          },
          "_materials": [
            {
              "__uuid__": "04dKqMWpZIOLaWSFMPOI1v"
            }
          ],
          "_receiveShadows": true
        },
        {
          "__type__": "44dc5bGoJVG973D/qrBQr94",
          "node": {
            "__id__": 17
          },
          "_N$color": {
            "__type__": "cc.Color",
            "r": 129,
            "g": 194,
            "b": 194
          },
          "_N$radiusTop": 600,
          "_N$radiusBottom": 600,
          "_N$height": 800,
          "_N$heightSegments": 10
        },
        {
          "__type__": "786dftT62NLJKOjBpXgOP5B",
          "node": {
            "__id__": 17
          },
          "rotateSpeed": 45,
          "wavesMinSpeed": 1,
          "wavesMaxSpeed": 3
        }
      ],
      "_scale": {
        "__type__": "cc.Vec3",
        "x": 1,
        "y": 1,
        "z": 1
      },
      "_quat": {
        "__type__": "cc.Quat",
        "x": -0.7071067811865475,
        "w": 0.7071067811865476
      },
      "_is3DNode": true
    },
    {
      "__type__": "cc.Node",
      "_name": "enemies",
      "_parent": {
        "__id__": 16
      },
      "_level": 3,
      "_components": [
        {
          "__type__": "09ddf+1UthOJqlpZy+ajb5j",
          "node": {
            "__id__": 18
          },
          "enemyColor": {
            "__type__": "cc.Color",
            "r": 242,
            "g": 83,
            "b": 70
          },
          "rotateSpeed": 45
        }
      ],
      "_scale": {
        "__type__": "cc.Vec3",
        "x": 1,
        "y": 1,
        "z": 1
      },
      "_is3DNode": true
    },
    {
      "__type__": "cc.Node",
      "_name": "sky",
      "_parent": {
        "__id__": 16
      },
      "_level": 3,
      "_components": [
        {
          "__type__": "857eaB/7qJL5YogoKjv/zE1",
          "node": {
            "__id__": 19
          },
          "rotateSpeed": 45,
          "blockPrefab": {
            "__uuid__": "d3PK/MW5tF+bMfwreRzhzp"
          }
        }
      ],
      "_scale": {
        "__type__": "cc.Vec3",
        "x": 1,
        "y": 1,
        "z": 1
      },
      "_is3DNode": true
    },
    {
      "__type__": "cc.Node",
      "_name": "camera",
      "_parent": {
        "__id__": 15
      },
      "_level": 2,
      "_components": [
        {
          "__id__": 21
        }
      ],
      "_position": {
        "__type__": "cc.Vec3",
        "y": 100,
        "z": 200
      },
      "_scale": {
        "__type__": "cc.Vec3",
        "x": 1,
        "y": 1,
        "z": 1
      },
      "_is3DNode": true
    },
    {
      "__type__": "cc.Camera",
      "node": {
        "__id__": 20
      },
      "_cullingMask": -3,
      "_clearFlags": 7,
      "_backgroundColor": {
        "__type__": "cc.Color",
        "r": 247,
        "g": 217,
        "b": 170
      },
      "_depth": -1,
      "_orthoSize": 800,
      "_nearClip": 1,
      "_ortho": false
    },
    {
      "__type__": "cc.Node",
      "_name": "airplane",
      "_parent": {
        "__id__": 15
      },
      "_children": [
        {
          "__id__": 23
        },
        {
          "__id__": 24
        },
        {
          "__id__": 25
        },
        {
          "__id__": 26
        },
        {
          "__id__": 27
        }
      ],
      "_level": 2,
      "_components": [
        {
          "__type__": "d53b1LPmLJOtL/2J/ZOSrA7",
          "node": {
            "__id__": 22
          },
          "moveSensivity": 3,
          "rotXSensivity": 0.4,
          "rotZSensivity": 20,
          "camera": {
            "__id__": 21
          }
        }
      ],
      "_position": {
        "__type__": "cc.Vec3",
        "y": 100
      },
      "_scale": {
        "__type__": "cc.Vec3",
        "x": 0.25,
        "y": 0.25,
        "z": 0.25
      },
      "_is3DNode": true,
      "groupIndex": 2
    },
    {
      "__type__": "cc.Node",
      "_name": "cabin",
      "_parent": {
        "__id__": 22
      },
      "_level": 3,
      "_components": [
        {
          "__type__": "cc.MeshRenderer",
          "node": {
            "__id__": 23
          },
          "_materials": [
            {
              "__uuid__": "04dKqMWpZIOLaWSFMPOI1v"
            }
          ],
          "_shadowCastingMode": 1
        },
        {
          "__type__": "a70270Fvd9Mn66Upk302M+8",
          "node": {
            "__id__": 23
          },
          "_N$color": {
            "__type__": "cc.Color",
            "r": 242,
            "g": 83,
            "b": 70
          },
          "_N$width": 60,
          "_N$height": 50,
          "_N$length": 50
        }
      ],
      "_scale": {
        "__type__": "cc.Vec3",
        "x": 1,
        "y": 1,
        "z": 1
      },
      "_is3DNode": true
    },
    {
      "__type__": "cc.Node",
      "_name": "engine",
      "_parent": {
        "__id__": 22
      },
      "_level": 3,
      "_components": [
        {
          "__type__": "cc.MeshRenderer",
          "node": {
            "__id__": 24
          },
          "_materials": [
            {
              "__uuid__": "04dKqMWpZIOLaWSFMPOI1v"
            }
          ],
          "_shadowCastingMode": 1
        },
        {
          "__type__": "a70270Fvd9Mn66Upk302M+8",
          "node": {
            "__id__": 24
          },
          "_N$color": {
            "__type__": "cc.Color",
            "r": 216,
            "g": 208,
            "b": 209
          },
          "_N$width": 20,
          "_N$height": 50,
          "_N$length": 50
        }
      ],
      "_position": {
        "__type__": "cc.Vec3",
        "x": 40
      },
      "_scale": {
        "__type__": "cc.Vec3",
        "x": 1,
        "y": 1,
        "z": 1
      },
      "_is3DNode": true
    },
    {
      "__type__": "cc.Node",
      "_name": "tail",
      "_parent": {
        "__id__": 22
      },
      "_level": 3,
      "_components": [
        {
          "__type__": "cc.MeshRenderer",
          "node": {
            "__id__": 25
          },
          "_materials": [
            {
              "__uuid__": "04dKqMWpZIOLaWSFMPOI1v"
            }
          ],
          "_shadowCastingMode": 1
        },
        {
          "__type__": "a70270Fvd9Mn66Upk302M+8",
          "node": {
            "__id__": 25
          },
          "_N$color": {
            "__type__": "cc.Color",
            "r": 242,
            "g": 83,
            "b": 70
          },
          "_N$width": 15,
          "_N$height": 20,
          "_N$length": 5
        }
      ],
      "_position": {
        "__type__": "cc.Vec3",
        "x": -35,
        "y": 25
      },
      "_scale": {
        "__type__": "cc.Vec3",
        "x": 1,
        "y": 1,
        "z": 1
      },
      "_is3DNode": true
    },
    {
      "__type__": "cc.Node",
      "_name": "wing",
      "_parent": {
        "__id__": 22
      },
      "_level": 3,
      "_components": [
        {
          "__type__": "cc.MeshRenderer",
          "node": {
            "__id__": 26
          },
          "_materials": [
            {
              "__uuid__": "04dKqMWpZIOLaWSFMPOI1v"
            }
          ],
          "_shadowCastingMode": 1
        },
        {
          "__type__": "a70270Fvd9Mn66Upk302M+8",
          "node": {
            "__id__": 26
          },
          "_N$color": {
            "__type__": "cc.Color",
            "r": 242,
            "g": 83,
            "b": 70
          },
          "_N$width": 40,
          "_N$height": 8,
          "_N$length": 150
        }
      ],
      "_scale": {
        "__type__": "cc.Vec3",
        "x": 1,
        "y": 1,
        "z": 1
      },
      "_is3DNode": true
    },
    {
      "__type__": "cc.Node",
      "_name": "propeller",
      "_parent": {
        "__id__": 22
      },
      "_children": [
        {
          "__id__": 28
        }
      ],
      "_level": 3,
      "_components": [
        {
          "__type__": "cc.MeshRenderer",
          "node": {
            "__id__": 27
          },
          "_materials": [
            {
              "__uuid__": "04dKqMWpZIOLaWSFMPOI1v"
            }
          ],
          "_shadowCastingMode": 1
        },
        {
          "__type__": "a70270Fvd9Mn66Upk302M+8",
          "node": {
            "__id__": 27
          },
          "_N$color": {
            "__type__": "cc.Color",
            "r": 89,
            "g": 51,
            "b": 46
          },
          "_N$width": 20,
          "_N$height": 10,
          "_N$length": 10
        },
        {
          "__type__": "cb92dR/FtVI558n2xXaixEz",
          "node": {
            "__id__": 27
          },
          "rotateSpeed": 1800
        }
      ],
      "_position": {
        "__type__": "cc.Vec3",
        "x": 50
      },
      "_scale": {
        "__type__": "cc.Vec3",
        "x": 1,
        "y": 1,
        "z": 1
      },
      "_is3DNode": true
    },
    {
      "__type__": "cc.Node",
      "_name": "blade",
      "_parent": {
        "__id__": 27
      },
      "_level": 4,
      "_components": [
        {
          "__type__": "cc.MeshRenderer",
          "node": {
            "__id__": 28
          },
          "_materials": [
            {
              "__uuid__": "04dKqMWpZIOLaWSFMPOI1v"
            }
          ],
          "_shadowCastingMode": 1
        },
        {
          "__type__": "a70270Fvd9Mn66Upk302M+8",
          "node": {
            "__id__": 28
          },
          "_N$color": {
            "__type__": "cc.Color",
            "r": 35,
            "g": 25,
            "b": 15
          },
          "_N$width": 1,
          "_N$length": 20
        }
      ],
      "_position": {
        "__type__": "cc.Vec3",
        "x": 8
      },
      "_scale": {
        "__type__": "cc.Vec3",
        "x": 1,
        "y": 1,
        "z": 1
      },
      "_is3DNode": true
    },
    {
      "__type__": "cc.Node",
      "_name": "light",
      "_parent": {
        "__id__": 15
      },
      "_level": 2,
      "_components": [
        {
          "__type__": "cc.LightComponent",
          "node": {
            "__id__": 29
          },
          "_intensity": 0.9,
          "_range": 1000,
          "_shadowType": 1,
          "_shadowFrustumSize": 1000
        }
      ],
      "_position": {
        "__type__": "cc.Vec3",
        "x": 150,
        "y": 350,
        "z": 350
      },
      "_scale": {
        "__type__": "cc.Vec3",
        "x": 1,
        "y": 1,
        "z": 1
      },
      "_quat": {
        "__type__": "cc.Quat",
        "x": -0.37686961114246337,
        "y": 0.16042999720436046,
        "z": 0.06645228065352382,
        "w": 0.9098437264664094
      },
      "_is3DNode": true
    }
  ],
  {
    "__type__": "cc.EffectAsset",
    "_name": "flat",
    "properties": {
      "mainTiling": {
        "type": 5,
        "value": [
          1,
          1
        ]
      },
      "mainOffset": {
        "type": 5,
        "value": [
          0,
          0
        ]
      },
      "diffuseColor": {
        "type": 9,
        "value": [
          1,
          1,
          1,
          1
        ]
      },
      "diffuseTexture": {
        "type": 13,
        "value": null
      },
      "glossiness": {
        "type": 4,
        "value": 10
      }
    },
    "techniques": [
      {
        "passes": [
          {
            "cullMode": 1029,
            "depthTest": true,
            "depthWrite": true,
            "blend": true,
            "program": "7337894719dbe5a3d7ee5f994d79fb575158e51de50f31ef406000ed"
          }
        ],
        "stages": [
          "opaque"
        ],
        "queue": 0,
        "priority": 0
      },
      {
        "stages": [
          "shadowcast"
        ],
        "passes": [
          {
            "cullMode": 1029,
            "depthTest": true,
            "depthWrite": true,
            "program": "7bfdf3306cbd7ce255d58764cf2713cd85d7677019f17d5a1a75fdd7"
          }
        ],
        "queue": 0,
        "priority": 0
      }
    ],
    "shaders": [
      {
        "vert": "#define _IS_VERT_SHADER 1\n\nuniform mat4 cc_matWorld;\nuniform mat3 cc_matWorldIT;\n\nuniform mat4 cc_matView;\n\nuniform mat4 cc_matViewProj;\n\nuniform vec3 cc_cameraPos;                       \n\nuniform vec3 cc_sceneAmbient;                    \n\nvarying vec3 v_worldPos;\nvarying vec3 v_viewPos;\n\n#ifndef USE_DIFFUSE_TEXTURE\n  #ifndef USE_EMISSIVE_TEXTURE\n    #ifndef USE_SPECULAR_TEXTURE\n      #define _NOT_USE_TEXTURE 1\n    #endif\n  #endif\n#endif\n\n#if USE_TILING_OFFSET && _USE_ATTRIBUTE_UV0\n  uniform vec2 mainTiling;\n  uniform vec2 mainOffset;\n#endif\n\n#ifdef _IS_VERT_SHADER\n  attribute vec3 a_position;\n#endif\n\n#ifndef _NOT_USE_TEXTURE\n\n  #if _USE_ATTRIBUTE_UV0\n    #ifdef _IS_VERT_SHADER\n      attribute mediump vec2 a_uv0;\n    #endif\n\n    varying mediump vec2 v_uv0;\n  #endif\n\n#endif\n\n#if _USE_ATTRIBUTE_COLOR\n\n  #ifdef _IS_VERT_SHADER\n    attribute lowp vec4 a_color;\n  #endif\n\n  varying lowp vec4 v_color;\n#endif\n\n#if _USE_ATTRIBUTE_NORMAL\n  #ifdef _IS_VERT_SHADER\n    attribute vec3 a_normal;\n  #endif\n#endif\n\n#ifdef _IS_VERT_SHADER\n\n  void ATTRIBUTE_TO_VARYING () {\n\n    #if _USE_ATTRIBUTE_COLOR\n        v_color = a_color;\n    #endif\n\n    #ifndef _NOT_USE_TEXTURE\n      #if _USE_ATTRIBUTE_UV0\n        v_uv0 = a_uv0;\n\n        #if USE_TILING_OFFSET\n          v_uv0 = v_uv0 * mainTiling + mainOffset;\n        #endif\n      #endif\n    #endif\n\n  }\n\n#endif\n\nvoid MUL_ATTR_COLOR (inout vec4 color) {\n  #if _USE_ATTRIBUTE_COLOR\n    #ifdef _IS_VERT_SHADER\n      color *= a_color;\n    #else\n      color *= v_color;\n    #endif\n  #endif\n}\n\nvoid MUL_ATTR_NORMAL (inout vec3 normal) {\n  #if _USE_ATTRIBUTE_NORMAL\n    #ifdef _IS_VERT_SHADER\n      normal *= a_normal;\n    #endif\n  #endif\n}\nvoid MUL_ATTR_NORMAL (inout vec4 normal) {\n  #if _USE_ATTRIBUTE_NORMAL\n    #ifdef _IS_VERT_SHADER\n      normal.xyz *= a_normal;\n    #endif\n  #endif\n}\n\n \n#if _USE_SHADOW_MAP\n  #if _NUM_SHADOW_LIGHTS > 0\n    #pragma for id in range(0, _NUM_SHADOW_LIGHTS)\n      uniform mat4 cc_lightViewProjMatrix_{id};\n      uniform float cc_minDepth_{id};\n      uniform float cc_maxDepth_{id};\n      varying vec4 v_posLightSpace{id};\n      varying float v_depth{id};\n    #pragma endFor\n  #endif\n#endif\n\nvoid CLAC_SHADOW () {\n  #if _USE_SHADOW_MAP\n    #if _NUM_SHADOW_LIGHTS > 0\n      #pragma for id in range(0, _NUM_SHADOW_LIGHTS)\n        v_posLightSpace{id} = cc_lightViewProjMatrix_{id} * vec4(v_worldPos, 1.0);\n        v_depth{id} = (v_posLightSpace{id}.z + cc_minDepth_{id}) / (cc_minDepth_{id} + cc_maxDepth_{id});\n      #pragma endFor\n    #endif\n  #endif\n}\n\nvoid main () {\n  vec4 position = vec4(a_position, 1);\n\n  vec4 model = cc_matWorld * position;\n  v_worldPos = model.xyz;\n\n  v_viewPos = -(cc_matView * model).xyz;\n\n  CLAC_SHADOW();\n  ATTRIBUTE_TO_VARYING();\n  \n  gl_Position = cc_matViewProj * model;\n}\n\n",
        "frag": "#define _IS_FRAG_SHADER 1\n\n#extension GL_OES_standard_derivatives : enable\n\nuniform mat4 cc_matView;\n\nuniform mat4 cc_matViewProj;\n\nuniform vec3 cc_cameraPos;                       \n\nuniform vec3 cc_sceneAmbient;                    \n\n#ifndef USE_DIFFUSE_TEXTURE\n  #ifndef USE_EMISSIVE_TEXTURE\n    #ifndef USE_SPECULAR_TEXTURE\n      #define _NOT_USE_TEXTURE 1\n    #endif\n  #endif\n#endif\n\n#if USE_TILING_OFFSET && _USE_ATTRIBUTE_UV0\n  uniform vec2 mainTiling;\n  uniform vec2 mainOffset;\n#endif\n\n#ifdef _IS_VERT_SHADER\n  attribute vec3 a_position;\n#endif\n\n#ifndef _NOT_USE_TEXTURE\n\n  #if _USE_ATTRIBUTE_UV0\n    #ifdef _IS_VERT_SHADER\n      attribute mediump vec2 a_uv0;\n    #endif\n\n    varying mediump vec2 v_uv0;\n  #endif\n\n#endif\n\n#if _USE_ATTRIBUTE_COLOR\n\n  #ifdef _IS_VERT_SHADER\n    attribute lowp vec4 a_color;\n  #endif\n\n  varying lowp vec4 v_color;\n#endif\n\n#if _USE_ATTRIBUTE_NORMAL\n  #ifdef _IS_VERT_SHADER\n    attribute vec3 a_normal;\n  #endif\n#endif\n\n#ifdef _IS_VERT_SHADER\n\n  void ATTRIBUTE_TO_VARYING () {\n\n    #if _USE_ATTRIBUTE_COLOR\n        v_color = a_color;\n    #endif\n\n    #ifndef _NOT_USE_TEXTURE\n      #if _USE_ATTRIBUTE_UV0\n        v_uv0 = a_uv0;\n\n        #if USE_TILING_OFFSET\n          v_uv0 = v_uv0 * mainTiling + mainOffset;\n        #endif\n      #endif\n    #endif\n\n  }\n\n#endif\n\nvoid MUL_ATTR_COLOR (inout vec4 color) {\n  #if _USE_ATTRIBUTE_COLOR\n    #ifdef _IS_VERT_SHADER\n      color *= a_color;\n    #else\n      color *= v_color;\n    #endif\n  #endif\n}\n\nvoid MUL_ATTR_NORMAL (inout vec3 normal) {\n  #if _USE_ATTRIBUTE_NORMAL\n    #ifdef _IS_VERT_SHADER\n      normal *= a_normal;\n    #endif\n  #endif\n}\nvoid MUL_ATTR_NORMAL (inout vec4 normal) {\n  #if _USE_ATTRIBUTE_NORMAL\n    #ifdef _IS_VERT_SHADER\n      normal.xyz *= a_normal;\n    #endif\n  #endif\n}\n\nvec3 gammaToLinearSpaceRGB(in vec3 sRGB) { \n  return sRGB * (sRGB * (sRGB * 0.305306011 + 0.682171111) + 0.012522878);\n}\n\nvec3 linearToGammaSpaceRGB(in vec3 RGB) { \n  vec3 S1 = sqrt(RGB);\n  vec3 S2 = sqrt(S1);\n  vec3 S3 = sqrt(S2);\n  return 0.585122381 * S1 + 0.783140355 * S2 - 0.368262736 * S3;\n}\n\nvec4 gammaToLinearSpaceRGBA(in vec4 sRGBA) {\n  return vec4(gammaToLinearSpaceRGB(sRGBA.rgb), sRGBA.a);\n}\n\nvec4 linearToGammaSpaceRGBA(in vec4 RGBA) {\n  return vec4(linearToGammaSpaceRGB(RGBA.rgb), RGBA.a);\n}\n\nvec4 linearToLinear (in vec4 value) {\n  return value;\n}\n\n#if INPUT_IS_GAMMA\n  #define TEXEL_TO_LINEAR gammaToLinearSpaceRGBA\n#else\n  #define TEXEL_TO_LINEAR linearToLinear\n#endif\n\n#if OUTPUT_TO_GAMMA\n  #define LINEAR_TO_OUTPUT_TEXEL linearToGammaSpaceRGBA\n#else\n  #define LINEAR_TO_OUTPUT_TEXEL linearToLinear\n#endif\n\nvarying vec3 v_worldPos;\nvarying vec3 v_viewPos;\n\nuniform vec4 diffuseColor;\n\n#if USE_DIFFUSE_TEXTURE\n  uniform sampler2D diffuseTexture;\n#endif\n\nvoid MULTIPLY_DIFFUSE_TEXTRUE_COLOR (inout vec4 color, in vec2 uv) {\n  #if USE_DIFFUSE_TEXTURE && _USE_ATTRIBUTE_UV0\n    vec4 diffuseTextureColor = texture2D(diffuseTexture, uv);\n    color *= TEXEL_TO_LINEAR(diffuseTextureColor);\n  #endif\n}\n\nvoid MULTIPLY_DIFFUSE_TEXTRUE_COLOR (inout vec4 color) {\n  #if USE_DIFFUSE_TEXTURE && _USE_ATTRIBUTE_UV0\n    \n    #ifdef _IS_VERT_SHADER\n      vec2 uv = a_uv0;\n    #else\n      vec2 uv = v_uv0;\n    #endif\n\n    MULTIPLY_DIFFUSE_TEXTRUE_COLOR(color, uv);\n  #endif\n}\n\nvoid CALC_DIFFUSE (inout vec4 diffuse, in vec2 uv) {\n  diffuse = diffuseColor;\n\n  MUL_ATTR_COLOR(diffuse);\n  MULTIPLY_DIFFUSE_TEXTRUE_COLOR(diffuse, uv);\n}\n\nvoid CALC_DIFFUSE (inout vec4 diffuse) {\n  diffuse = diffuseColor;\n\n  MUL_ATTR_COLOR(diffuse);\n  MULTIPLY_DIFFUSE_TEXTRUE_COLOR(diffuse);\n}\n\n#if _USE_SHADOW_MAP\n  \n\nvec4 packDepthToRGBA(float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 160581375.0) * depth;\n  ret = fract(ret);\n  ret -= ret.yzww * vec4(1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0, 0.0);\n  return ret;\n}\n\nfloat unpackRGBAToDepth(vec4 color) {\n  return dot(color, vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n}\n\n  #if _NUM_SHADOW_LIGHTS > 0\n    #pragma for id in range(0, _NUM_SHADOW_LIGHTS)\n      uniform sampler2D cc_shadowMap_{id};\n      uniform float cc_darkness_{id};\n      uniform float cc_depthScale_{id};\n      uniform float cc_frustumEdgeFalloff_{id};\n      varying vec4 v_posLightSpace{id};\n      varying float v_depth{id};\n    #pragma endFor\n  #endif\n\n  float computeFallOff(float esm, vec2 coords, float frustumEdgeFalloff) {\n    float mask = smoothstep(1.0 - frustumEdgeFalloff, 1.0, clamp(dot(coords, coords), 0.0, 1.0));\n    return mix(esm, 1.0, mask);\n  }\n\n  float computeShadowESM(sampler2D shadowMap, vec4 pos_lightspace, float vDepth, float depthScale, float darkness, float frustumEdgeFalloff) {\n    vec2 projCoords = pos_lightspace.xy / pos_lightspace.w;\n    vec2 shadowUV = projCoords * 0.5 + vec2(0.5);\n    if (shadowUV.x < 0.0 || shadowUV.x > 1.0 || shadowUV.y < 0.0 || shadowUV.y > 1.0) {\n      return 1.0;\n    }\n    float currentDepth = clamp(vDepth, 0.0, 1.0);\n    float closestDepth = unpackRGBAToDepth(texture2D(shadowMap, shadowUV));\n    \n    float esm = clamp(exp(-depthScale * (currentDepth - closestDepth)), 1.0 - darkness, 1.0);\n    return computeFallOff(esm, projCoords, frustumEdgeFalloff);\n  }\n\n  float computeShadow() {\n    float shadow = 1.0;\n    #if _NUM_SHADOW_LIGHTS > 0\n      #pragma for id in range(0, _NUM_SHADOW_LIGHTS)\n        shadow *= computeShadowESM(cc_shadowMap_{id}, v_posLightSpace{id}, v_depth{id}, cc_depthScale_{id}, cc_darkness_{id}, cc_frustumEdgeFalloff_{id});\n      #pragma endFor\n    #endif\n    return shadow;\n  }\n\n#endif\n\n#if _NUM_DIR_LIGHTS > 0\n  uniform vec4 cc_dirLightDirection[_NUM_DIR_LIGHTS];            \n  uniform vec4 cc_dirLightColor[_NUM_DIR_LIGHTS];                \n#endif\n\n#if _NUM_POINT_LIGHTS > 0\n  uniform vec4 cc_pointLightPositionAndRange[_NUM_POINT_LIGHTS];   \n  uniform vec4 cc_pointLightColor[_NUM_POINT_LIGHTS];              \n#endif\n\n#if _NUM_SPOT_LIGHTS > 0\n  uniform vec4 cc_spotLightPositionAndRange[_NUM_SPOT_LIGHTS];    \n  uniform vec4 cc_spotLightDirection[_NUM_SPOT_LIGHTS];           \n  uniform vec4 cc_spotLightColor[_NUM_SPOT_LIGHTS];               \n#endif\n\nstruct LightInfo {\n  vec3 lightDir;\n  vec3 radiance;\n};\n\nLightInfo computeDirectionalLighting(\n  vec4 lightDirection,\n  vec4 lightColor\n) {\n  LightInfo ret;\n  ret.lightDir = -normalize(lightDirection.xyz);\n  ret.radiance = lightColor.rgb;\n  return ret;\n}\n\nLightInfo computePointLighting(\n  vec3 worldPosition,\n  vec4 lightPositionAndRange,\n  vec4 lightColor\n) {\n  LightInfo ret;\n  vec3 lightDir = lightPositionAndRange.xyz - worldPosition;\n  float attenuation = max(0., 1.0 - length(lightDir) / lightPositionAndRange.w);\n  \n  ret.lightDir = normalize(lightDir);\n  ret.radiance = lightColor.rgb * attenuation;\n  return ret;\n}\n\nLightInfo computeSpotLighting(\n  vec3 worldPosition,\n  vec4 lightPositionAndRange,\n  vec4 lightDirection,\n  vec4 lightColor\n) {\n  LightInfo ret;\n  vec3 lightDir = lightPositionAndRange.xyz - worldPosition;\n  float attenuation = max(0., 1.0 - length(lightDir) / lightPositionAndRange.w);\n  lightDir = normalize(lightDir);\n  float cosConeAngle = max(0., dot(lightDirection.xyz, -lightDir));\n  cosConeAngle = cosConeAngle < lightDirection.w ? 0. : cosConeAngle;\n  cosConeAngle = pow(cosConeAngle, lightColor.w);\n  \n  ret.lightDir = lightDir;\n  ret.radiance = lightColor.rgb * attenuation * cosConeAngle;\n  return ret;\n}\n\nuniform float glossiness;\n\nstruct PhongMaterial {\n  vec3 diffuse;\n  vec3 emissive;\n  vec3 specular;\n  float opacity;\n};\n\nstruct Lighting {\n  vec3 diffuse;\n  vec3 specular;\n};\n\nvoid brdf (inout Lighting result, LightInfo info, vec3 normal, vec3 viewDirection, float glossiness) {\n  float ndh = 0.0;\n  \n  vec3 halfDir = normalize(viewDirection + info.lightDir);\n  float NdotH = max(0.0, dot(normal, halfDir));\n  NdotH = pow(NdotH, max(1.0, glossiness * 128.0));\n\n  vec3 diffuse = info.radiance * max(0.0, dot(normal, info.lightDir));\n  vec3 specular = info.radiance * NdotH;\n\n  result.diffuse += diffuse;\n  result.specular += specular;\n}\n\nLighting getPhongLighting (vec3 normal, vec3 worldPos, vec3 viewDirection, float glossiness) {\n  Lighting result;\n  result.diffuse = vec3(0, 0, 0);\n  result.specular = vec3(0, 0, 0);\n\n  #if _NUM_DIR_LIGHTS > 0\n  for (int i = 0; i < _NUM_DIR_LIGHTS; i++) {\n    LightInfo info = computeDirectionalLighting(cc_dirLightDirection[i], cc_dirLightColor[i]);\n    brdf(result, info, normal, viewDirection, glossiness);\n  }\n  #endif\n\n  #if _NUM_POINT_LIGHTS > 0\n  for (int i = 0; i < _NUM_POINT_LIGHTS; i++) {\n    LightInfo info = computePointLighting(worldPos, cc_pointLightPositionAndRange[i], cc_pointLightColor[i]);\n    brdf(result, info, normal, viewDirection, glossiness);\n  }\n  #endif\n\n  #if _NUM_SPOT_LIGHTS > 0\n  for (int i = 0; i < _NUM_SPOT_LIGHTS; i++) {\n    LightInfo info = computeSpotLighting(worldPos, cc_spotLightPositionAndRange[i], cc_spotLightDirection[i], cc_spotLightColor[i]);\n    brdf(result, info, normal, viewDirection, glossiness);\n  }\n  #endif\n\n  result.diffuse += cc_sceneAmbient;\n\n  return result;\n}\n\nvec4 composePhongShading (Lighting lighting, PhongMaterial mtl) {\n  vec4 o = vec4(0.0, 0.0, 0.0, 1.0);\n\n  \n  o.rgb = lighting.diffuse * mtl.diffuse;\n  \n  #if USE_EMISSIVE\n    o.rgb += mtl.emissive;\n  #endif\n\n  #if USE_SPECULAR\n    o.rgb += lighting.specular * mtl.specular;\n  #endif\n  \n  #if _USE_SHADOW_MAP\n    o.rgb *= computeShadow();\n  #endif\n\n  o.a = mtl.opacity;\n\n  return o;\n}\n\nvoid CALC_PHONG_LIGHTING (inout vec4 outColor, in PhongMaterial material, in vec3 normal, in vec3 worldPosition, in vec3 viewDirection) {\n  Lighting phongLighting = getPhongLighting(normal, worldPosition, viewDirection, glossiness);\n  outColor = composePhongShading(phongLighting, material);\n}\n\nvoid main () {\n  vec4 diffuse;\n  CALC_DIFFUSE(diffuse);\n\n  PhongMaterial material;\n  material.diffuse = diffuse.rgb;\n  material.opacity = diffuse.a;\n\n  material.emissive = vec3(0.0);\n  material.specular = vec3(0.0);\n\n  vec3 viewDirection = normalize(cc_cameraPos.xyz - v_worldPos);\n  vec4 phongColor;\n\n  \n  vec3 fdx = vec3( dFdx( v_viewPos.x ), dFdx( v_viewPos.y ), dFdx( v_viewPos.z ) );\n\tvec3 fdy = vec3( dFdy( v_viewPos.x ), dFdy( v_viewPos.y ), dFdy( v_viewPos.z ) );\n\tvec3 normal = normalize( cross( fdx, fdy ) );\n  \n  CALC_PHONG_LIGHTING(phongColor, material, normal, v_worldPos, viewDirection);\n\n  gl_FragColor = LINEAR_TO_OUTPUT_TEXEL( phongColor );\n}\n\n",
        "defines": [
          {
            "name": "USE_DIFFUSE_TEXTURE",
            "type": "boolean",
            "defines": []
          },
          {
            "name": "USE_EMISSIVE_TEXTURE",
            "type": "boolean",
            "defines": [
              "USE_DIFFUSE_TEXTURE"
            ]
          },
          {
            "name": "USE_SPECULAR_TEXTURE",
            "type": "boolean",
            "defines": [
              "USE_DIFFUSE_TEXTURE",
              "USE_EMISSIVE_TEXTURE"
            ]
          },
          {
            "name": "USE_TILING_OFFSET",
            "type": "boolean",
            "defines": []
          },
          {
            "name": "_USE_ATTRIBUTE_UV0",
            "type": "boolean",
            "defines": []
          },
          {
            "name": "_USE_ATTRIBUTE_COLOR",
            "type": "boolean",
            "defines": []
          },
          {
            "name": "_USE_ATTRIBUTE_NORMAL",
            "type": "boolean",
            "defines": []
          },
          {
            "name": "_USE_SHADOW_MAP",
            "type": "boolean",
            "defines": []
          },
          {
            "name": "_NUM_SHADOW_LIGHTS",
            "type": "number",
            "defines": [
              "_USE_SHADOW_MAP"
            ]
          },
          {
            "name": "INPUT_IS_GAMMA",
            "type": "boolean",
            "defines": []
          },
          {
            "name": "OUTPUT_TO_GAMMA",
            "type": "boolean",
            "defines": []
          },
          {
            "name": "_NUM_DIR_LIGHTS",
            "type": "number",
            "defines": []
          },
          {
            "name": "_NUM_POINT_LIGHTS",
            "type": "number",
            "defines": []
          },
          {
            "name": "_NUM_SPOT_LIGHTS",
            "type": "number",
            "defines": []
          },
          {
            "name": "USE_EMISSIVE",
            "type": "boolean",
            "defines": []
          },
          {
            "name": "USE_SPECULAR",
            "type": "boolean",
            "defines": []
          }
        ],
        "uniforms": [
          {
            "name": "mainTiling",
            "type": 5,
            "property": true,
            "defines": [
              "USE_TILING_OFFSET",
              "_USE_ATTRIBUTE_UV0"
            ]
          },
          {
            "name": "mainOffset",
            "type": 5,
            "property": true,
            "defines": [
              "USE_TILING_OFFSET",
              "_USE_ATTRIBUTE_UV0"
            ]
          },
          {
            "name": "mainTiling",
            "type": 5,
            "property": true,
            "defines": [
              "USE_TILING_OFFSET",
              "_USE_ATTRIBUTE_UV0"
            ]
          },
          {
            "name": "mainOffset",
            "type": 5,
            "property": true,
            "defines": [
              "USE_TILING_OFFSET",
              "_USE_ATTRIBUTE_UV0"
            ]
          },
          {
            "name": "diffuseColor",
            "type": 9,
            "property": true,
            "defines": []
          },
          {
            "name": "diffuseTexture",
            "type": 13,
            "property": true,
            "defines": [
              "USE_DIFFUSE_TEXTURE"
            ]
          },
          {
            "name": "glossiness",
            "type": 4,
            "property": true,
            "defines": []
          }
        ],
        "attributes": [
          {
            "name": "a_position",
            "type": 6,
            "defines": []
          },
          {
            "name": "a_uv0",
            "type": 5,
            "defines": [
              "_USE_ATTRIBUTE_UV0"
            ]
          },
          {
            "name": "a_color",
            "type": 7,
            "defines": [
              "_USE_ATTRIBUTE_COLOR"
            ]
          },
          {
            "name": "a_normal",
            "type": 6,
            "defines": [
              "_USE_ATTRIBUTE_NORMAL"
            ]
          },
          {
            "name": "a_position",
            "type": 6,
            "defines": []
          },
          {
            "name": "a_uv0",
            "type": 5,
            "defines": [
              "_USE_ATTRIBUTE_UV0"
            ]
          },
          {
            "name": "a_color",
            "type": 7,
            "defines": [
              "_USE_ATTRIBUTE_COLOR"
            ]
          },
          {
            "name": "a_normal",
            "type": 6,
            "defines": [
              "_USE_ATTRIBUTE_NORMAL"
            ]
          }
        ],
        "extensions": [
          {
            "name": "OES_standard_derivatives"
          }
        ],
        "name": "7337894719dbe5a3d7ee5f994d79fb575158e51de50f31ef406000ed"
      },
      {
        "vert": "#define _IS_VERT_SHADER 1\n\nattribute vec3 a_position;\n\nuniform mat4 cc_matWorld;\nuniform mat4 cc_lightViewProjMatrix;\nuniform float cc_minDepth;\nuniform float cc_maxDepth;\nuniform float cc_bias;\nvarying float vDepth;\n\n#if _USE_SKINNING\n\n  attribute vec4 a_weights;\n  attribute vec4 a_joints;\n\n  #if _USE_JOINTS_TEXTRUE\n  uniform sampler2D _jointsTexture;\n  uniform float _jointsTextureSize;\n\n  mat4 getBoneMatrix(const in float i) {\n    float size = _jointsTextureSize;\n    float j = i * 4.0;\n    float x = mod(j, size);\n    float y = floor(j / size);\n\n    float dx = 1.0 / size;\n    float dy = 1.0 / size;\n\n    y = dy * (y + 0.5);\n\n    vec4 v1 = texture2D(_jointsTexture, vec2(dx * (x + 0.5), y));\n    vec4 v2 = texture2D(_jointsTexture, vec2(dx * (x + 1.5), y));\n    vec4 v3 = texture2D(_jointsTexture, vec2(dx * (x + 2.5), y));\n    vec4 v4 = texture2D(_jointsTexture, vec2(dx * (x + 3.5), y));\n\n    return mat4(v1, v2, v3, v4);\n  }\n  #else\n  uniform mat4 _jointMatrices[64];\n\n  mat4 getBoneMatrix(const in float i) {\n    return _jointMatrices[int(i)];\n  }\n  #endif\n\n  mat4 skinMatrix() {\n    return\n      getBoneMatrix(a_joints.x) * a_weights.x +\n      getBoneMatrix(a_joints.y) * a_weights.y +\n      getBoneMatrix(a_joints.z) * a_weights.z +\n      getBoneMatrix(a_joints.w) * a_weights.w\n      ;\n  }\n#endif\n\nvoid SKIN_VERTEX(inout vec4 a1) {\n  #if _USE_SKINNING\n    mat4 m = skinMatrix();\n    a1 = m * a1;\n  #endif\n}\n\nvoid SKIN_VERTEX(inout vec4 a1, inout vec4 a2) {\n  #if _USE_SKINNING\n    mat4 m = skinMatrix();\n    a1 = m * a1;\n    a2 = m * a2;\n  #endif\n}\n\nvoid SKIN_VERTEX(inout vec4 a1, inout vec4 a2, inout vec4 a3) {\n  #if _USE_SKINNING\n    mat4 m = skinMatrix();\n    a1 = m * a1;\n    a2 = m * a2;\n    a3 = m * a3;\n  #endif\n}\n\nvoid main () {\n  vec4 position = vec4(a_position, 1);\n\n  SKIN_VERTEX(position);\n\n  gl_Position = cc_lightViewProjMatrix * cc_matWorld * position;\n\n  \n  vDepth = ((gl_Position.z + cc_minDepth) / (cc_minDepth + cc_maxDepth)) + cc_bias;\n}\n\n",
        "frag": "#define _IS_FRAG_SHADER 1\n\nuniform float cc_depthScale;\nvarying float vDepth;\n\nvec4 packDepthToRGBA(float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 160581375.0) * depth;\n  ret = fract(ret);\n  ret -= ret.yzww * vec4(1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0, 0.0);\n  return ret;\n}\n\nfloat unpackRGBAToDepth(vec4 color) {\n  return dot(color, vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n}\n\nvoid main () {\n  \n  \n  gl_FragColor = packDepthToRGBA(vDepth);\n  \n  \n}\n\n",
        "defines": [
          {
            "name": "_USE_SKINNING",
            "type": "boolean",
            "defines": []
          },
          {
            "name": "_USE_JOINTS_TEXTRUE",
            "type": "boolean",
            "defines": [
              "_USE_SKINNING"
            ]
          }
        ],
        "uniforms": [],
        "attributes": [
          {
            "name": "a_position",
            "type": 6,
            "defines": []
          },
          {
            "name": "a_weights",
            "type": 7,
            "defines": [
              "_USE_SKINNING"
            ]
          },
          {
            "name": "a_joints",
            "type": 7,
            "defines": [
              "_USE_SKINNING"
            ]
          }
        ],
        "extensions": [],
        "name": "7bfdf3306cbd7ce255d58764cf2713cd85d7677019f17d5a1a75fdd7"
      }
    ]
  },
  [
    {
      "__type__": "cc.Prefab",
      "_name": "block",
      "data": {
        "__id__": 1
      }
    },
    {
      "__type__": "cc.Node",
      "_name": "block",
      "_level": 1,
      "_components": [
        {
          "__type__": "cc.MeshRenderer",
          "node": {
            "__id__": 1
          },
          "_materials": [
            {
              "__uuid__": "04dKqMWpZIOLaWSFMPOI1v"
            }
          ]
        },
        {
          "__type__": "a70270Fvd9Mn66Upk302M+8",
          "node": {
            "__id__": 1
          },
          "_N$color": {
            "__type__": "cc.Color",
            "r": 216,
            "g": 208,
            "b": 209
          },
          "_N$width": 1,
          "_N$height": 1,
          "_N$length": 1
        }
      ],
      "_prefab": {
        "__type__": "cc.PrefabInfo",
        "root": {
          "__id__": 1
        },
        "asset": {
          "__uuid__": "d3PK/MW5tF+bMfwreRzhzp"
        },
        "fileId": "9a31sAjxdLEa+DrqUtrSx+"
      },
      "_scale": {
        "__type__": "cc.Vec3",
        "x": 1,
        "y": 1,
        "z": 1
      },
      "_is3DNode": true
    }
  ]
]
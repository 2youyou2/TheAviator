
CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      depthStencilState:
        depthTest: true
        depthWrite: true
      blendState:
        targets:
        - blend: true
      properties:
        diffuseColor: { value: [1, 1, 1, 1], inspector: { type: color } }
  - stages:
      - shadowcast
    passes:
      - vert: shadow-map-vs
        frag: shadow-map-fs
        rasterizerState:
          cullMode: back
        depthStencilState:
          depthTest: true
          depthWrite: true
}%

CCProgram vs %{

precision highp float;

#include <cc-local>
#include <cc-global>
#include <shadow>
#include <input-standard>

out vec3 v_worldPos;
out vec3 v_viewPos;
out vec4 v_color;

void main () {
  StandardVertInput In;
  CCVertInput(In);

  vec4 position = In.position;

  vec4 model = cc_matWorld * position;
  v_worldPos = model.xyz;

  v_viewPos = -(cc_matView * model).xyz;

  CCShadowInput(v_worldPos);

  #if CC_USE_ATTRIBUTE_COLOR
    v_color = In.color;
  #endif
  
  gl_Position = cc_matViewProj * model;
}

}%

CCProgram fs %{

// for use dFdx/dFdy
#if USE_DERIVATIVES
  #extension GL_OES_standard_derivatives : enable
#endif

precision highp float;

#include <cc-global>
#include <output>
#include <shading-phong>

in vec3 v_worldPos;
in vec3 v_viewPos;
in vec4 v_color;

uniform DIFFUSE {
  lowp vec4 diffuseColor;
};

void main () {
  vec4 diffuse = diffuseColor * v_color;

  PhongSurface s;
  s.diffuse = diffuse.rgb;
  s.opacity = diffuse.a;

  s.emissive = vec3(0.0);
  s.specular = vec3(0.0);

  vec3 viewDirection = normalize(cc_cameraPos.xyz - v_worldPos);

  vec3 normal = vec3(1.);
  #if USE_DERIVATIVES
    // flat shading
    vec3 fdx = vec3( dFdx( v_viewPos.x ), dFdx( v_viewPos.y ), dFdx( v_viewPos.z ) );
    vec3 fdy = vec3( dFdy( v_viewPos.x ), dFdy( v_viewPos.y ), dFdy( v_viewPos.z ) );
    normal = normalize( cross( fdx, fdy ) );
  #endif

  s.normal = normal;
  s.position = v_worldPos;
  s.viewDirection = viewDirection;
  
  vec4 phongColor = CCPhongShading(s);
  // vec4 phongColor = vec4(s.diffuse, 1.0);//CCPhongShading(s);

  gl_FragColor = CCFragOutput( phongColor );
}


}%
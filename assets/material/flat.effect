
CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      depthStencilState:
        depthTest: true
        depthWrite: true
      blendState:
        targets:
        - blend: true
      properties:
        diffuseColor: { value: [1, 1, 1, 1], inspector: { type: color } }
        glossiness: { value: 10 }
  - stages:
      - shadowcast
    passes:
      - vert: shadow-map-vs
        frag: shadow-map-fs
        rasterizerState:
          cullMode: back
        depthStencilState:
          depthTest: true
          depthWrite: true
}%

CCProgram vs %{

precision highp float;

#include <cc-local>
#include <cc-global>
#include <shadow>

in vec3 a_position;
in vec4 a_color;

out vec3 v_worldPos;
out vec3 v_viewPos;
out vec4 v_color;

void main () {
  vec4 position = vec4(a_position, 1);

  vec4 model = cc_matWorld * position;
  v_worldPos = model.xyz;

  v_viewPos = -(cc_matView * model).xyz;

  CLAC_SHADOW(v_worldPos);

  v_color = a_color;
  
  gl_Position = cc_matViewProj * model;
}

}%

CCProgram fs %{

// for use dFdx/dFdy
#if USE_DERIVATIVES
  #extension GL_OES_standard_derivatives : enable
#endif

precision highp float;

#include <cc-global>
#include <encodings>
#include <phong>

in vec3 v_worldPos;
in vec3 v_viewPos;
in vec4 v_color;

uniform DIFFUSE {
  lowp vec4 diffuseColor;
};

void main () {
  vec4 diffuse = diffuseColor * v_color;

  PhongMaterial material;
  material.diffuse = diffuse.rgb;
  material.opacity = diffuse.a;

  material.emissive = vec3(0.0);
  material.specular = vec3(0.0);

  vec3 viewDirection = normalize(cc_cameraPos.xyz - v_worldPos);
  vec4 phongColor;

  vec3 normal = vec3(1.);
  #if USE_DERIVATIVES
    // flat shading
    vec3 fdx = vec3( dFdx( v_viewPos.x ), dFdx( v_viewPos.y ), dFdx( v_viewPos.z ) );
    vec3 fdy = vec3( dFdy( v_viewPos.x ), dFdy( v_viewPos.y ), dFdy( v_viewPos.z ) );
    normal = normalize( cross( fdx, fdy ) );
  #endif
  
  CALC_PHONG_LIGHTING(phongColor, material, normal, v_worldPos, viewDirection);

  gl_FragColor = LINEAR_TO_OUTPUT_TEXEL( phongColor );
}


}%